#!/bin/bash
# vim: et sw=4

# Make empty globs not expand to the glob string
shopt -s nullglob

COLOR=true # or false

# How wide the test name is allowed to be (just aesthetics)
TEXT_WIDTH=74

# Locate this script on disk to use as root.
ROOT_DIR=$(dirname $(readlink -f "$0"))

# Where the tests are
INPUT_DIR="$ROOT_DIR/tests"

# Where all output is saved to
OUTPUT_DIR="$ROOT_DIR/output"

# Exit code for this program (succesfull for now)
EXIT_CODE=0

function die {
	echo "$0: error: $@" >&2
	exit 1
}

# Some basics
function is_defined {
    [ -z $1 ] && echo false || echo true
}
function with_default {
    for cmd in "$@"; do
        if [[ -n "$cmd" ]]; then
            echo "$cmd"
            return
        fi
    done
}

function print_justified {
    message="$@"
    printf "%-${TEXT_WIDTH}s" "$message"
}
function print_green {
    if $COLOR
    then echo -e "\e[32m$@\e[0m"
    else echo "$@"
    fi
}
function print_red {
    if $COLOR
    then echo -e "\e[31m$@\e[0m"
    else echo "$@"
    fi
}
function print_yellow {
    if $COLOR
    then echo -e "\e[33m$@\e[0m"
    else echo "$@"
    fi
}

function ast_interpret {
    "$fml" ast_interpret "$input"
}

function bc_interpret {
    template="$in.bc.txt"
    "$fml" bc_interpret "$input"
}

function bc_interpret_fml {
    compiled_bytecode="$out.bc"

    "$fml_ref" bc_compile "$input" > "$compiled_bytecode" && \
    "$fml" bc_interpret "$compiled_bytecode"
}

function bc_compile {
    compiled_bytecode="$out.bc"

    "$fml" bc_compile "$input" > "$compiled_bytecode" && \
    "$fml_ref" bc_interpret "$compiled_bytecode"
}

function run {
    "$fml" run "$input"
}

function run_test {
    format=$1 # "fml" or "bc"
    type=$2   # e.g. "run_ast"
    test=${3%%.*} # e.g. "arrays" or "arrays.fml" or "arrays.bc.txt"

    require_fml

    # Create dir or die
    mkdir -p "$OUTPUT_DIR/$type/" || die "failed to create output dir"

    in="$INPUT_DIR/$format/$test"
    out="$OUTPUT_DIR/$type/$test"
    input="$in.$format"
    output="$out.out"
    error_output="$out.err"
    expected="$out.expected"
    delta="$out.diff"
    template="$input"

    [[ -r "$input" ]] || die "Can't read '$input'"

    # Report in
    print_justified "Executing $type test: \"$test\"... "

    # Run the test capturing stdout and stderr
    "$type" 1>"$output" 2>"$error_output"
    exit_code=$?

    # Extract the relevant comments from the source file to get expected output
    sed -n 's/[^/]*\/\/ > \(.*\)/\1/p' "$template" > "$expected"

    # Compare output and expected output
    diff -u "$expected" "$output" > "$delta"
    diff_status=$?

    # Compare results, print delta into a file, and report
    if (( $exit_code == 0 && $diff_status == 0 )); then
        if [[ -s "$error_output" ]]; then
            print_yellow "stderr"
            print_yellow "[stderr: \"$error_output\"]"
        else
            print_green "passed"
        fi
    else
        print_red "failed"
        (( $exit_code != 0 )) && print_red "[exit code: $exit_code]"
        [[ -s "$delta" ]] && print_red "[diff: \"$delta\"]"
        [[ -s "$error_output" ]] && print_yellow "[stderr: \"$error_output\"]"
        EXIT_CODE=1
    fi
}

function get_extension {
    case "$1" in
        ast_interpret) extension=fml ;;
        bc_interpret) extension=bc ;;
        bc_interpret_fml) extension=fml ;;
        bc_compile) extension=fml ;;
        run) extension=fml ;;
        *) die "Unknown test type '$1'. Available test types: ast_interpret, bc_interpret, bc_compile, run." ;;
    esac
}

function get_tests {
    extension="$1"
    # Read tests in directory with glob into array
    tests=("$INPUT_DIR/$extension/"*".$extension")
    tests=("${tests[@]%.$extension}") # remove extension
    tests=("${tests[@]##*/}") # remove leading path
}

function run_tests {
    type="$1"
    get_extension "$type"
    get_tests "$extension"
    for test in "${tests[@]}"; do
        run_test "$extension" "$type" "$test"
    done
}

# Use a command defined via FML evnironmental variable, or default to ./fml
fml=$(with_default "$FML" "./fml")
fml_ref=$(with_default "$FML_REF" "$FML_REF_BC_INT" "$fml")

function require_fml {
    if ! command -v "$fml" 2>/dev/null 1>/dev/null
    then
        echo "Cannot find interpreter at path: \"$fml\"." >&2
        echo "Provide a path to an FML interpreter via the environmental variable FML, eg:" >&2
        echo >&2
        echo "    export FML=/path/to/interpreter/fml" >&2
        echo "    ./suite ..." >&2
        echo >&2
        exit 1
    fi
}

test_type=$1
shift

case "$test_type" in
show)
    get_tests "$1"
    (( ${#tests[@]} > 0 )) && printf '%s\n' "${tests[@]}"
    ;;
all)
    for suite in ast_interpret bc_interpret bc_interpret_fml bc_compile run; do
        run_tests "$suite"
    done
    ;;
*)
    # Verify test type and get extension ("bc" or "fml")
    get_extension "$test_type"

    for test in "$@"
    do
        run_test "$extension" "$test_type" "$test"
    done
    ;;
esac

exit "$EXIT_CODE"
